DELIMITER $$

drop procedure if exists _canopentestopportunity $$

create procedure _canopentestopportunity (
    v_clienname varchar(100)
  , v_testee bigint
  , v_testkey varchar(255)  
  , v_sessionkid varbinary(16)
  , v_maxoppportunities int
  , v_new bit /*output */
  , v_number int /*output*/
  , v_reason text /*output */
  , v_debug int -- = 0
)
sql security invoker 
proc: begin

    declare v_delaydays int;
	declare v_isopen int;
	declare v_today datetime(3);
    declare v_testid varchar(200);
    declare v_environment varchar(50);
    declare v_sessiontype int;
	
	set v_today = now(3);
	set v_new = 0;
	set v_number = 0;
	set v_reason = null;

    set v_environment = (select environment from externs where clientname = v_clientname);
	set v_sessiontype = (select sessiontype from `session` where _key = v_sessionid);
    set v_testid = (select testid from itembank.tblsetofadminsubjects where _key = v_testkey);
    
    -- if simulation environment uses 'real' students then we want the test to proceed anyway
    if (v_environment <> 'simulation' and v_testee > 0) then   -- only check eligibility on real students
        call _isopportunityblocked(v_clientname, v_testee, v_testid, v_maxopportunities, v_reason /*output*/, v_sessiontype);
    end if;

    if (v_reason is not null) then
        if (v_reason = 'na') then set v_number = -1; end if;  -- this test is not applicable to the student. 
        leave proc;
    end if;
    
    set v_delaydays = (select oppdelay from timelimits where _efk_testid = v_testid and clientname = v_clientname);    -- use testid here because tds_configs is the source

	if (v_delaydays is null) then
		set v_delaydays = (select oppdelay from timelimits where _efk_testid is null and clientname = v_clientname);
    end if;
    
    -- first try to open an existing opportunity of the main test
    -- _canopenexistingopportunity must use the test key, not testid, because this will be resuming an actual physical test, not a logical one
	call _canopenexistingopportunity(v_clientname, v_testee, v_testid, v_sessionid, v_maxopportunities, v_number /*output*/, v_reason /*output*/, 0);

	if ((v_number > 0) or (v_reason is not null)) then -- either success or a fatal error
      leave proc;
	end if;
	
	-- neither success nor a fatal error, so now try to open a new opportunity
    -- important note: this function takes into account that an expired opportunity may have to be closed first
	call _canopennewopportunity( v_clientname, v_testee, v_testid, v_maxopportunities, v_delaydays, v_number /*output*/, v_reason /*output*/, v_sessionid, 0);

	if (v_number > 0) then
		if (v_debug = 1) then select 'can open exit 5'; end if;
		set v_new = 1;
	end if;
	
	call _logdblatency('_canopentestopportunity', v_today, v_testee, 1, null, null, null, v_clientname, null);

end $$

DELIMITER ;
