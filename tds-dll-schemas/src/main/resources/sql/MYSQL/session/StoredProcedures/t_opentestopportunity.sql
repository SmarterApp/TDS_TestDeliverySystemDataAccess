DELIMITER $$

drop procedure if exists t_opentestopportunity $$

create procedure t_opentestopportunity (
/*
Description:

VERSION 	DATE 			AUTHOR 			COMMENTS
001			2/10/2015		Elena F. 		Code Migration
*/
    v_testee bigint
  , v_testkey varchar(250)  
  , v_sessionkey varbinary(16)
  , v_browserkey varbinary(16)
  , v_guestaccommodations text -- = null
  , v_debug bit -- = 0
)
sql security invoker 
proc: begin

    declare v_starttime 	datetime(3);
    declare v_clientname 	varchar(100);	
    declare v_testid        varchar(200);
    declare v_testeeid      varchar(100);
    declare v_testeename    varchar(100);
    declare v_maxopportunities int;
    declare v_reason        text;
    declare v_isnew         int;
    declare v_oppnum        int;
    declare v_error         varchar(200);
    declare v_testoppkey    varbinary(16);
    declare v_proctor       bigint;
    declare v_newstatus     varchar(50);
	declare v_procname 		varchar(100);
	declare v_restorerts 	bit; 
    declare v_sessid varchar(50);
    declare v_proctorname varchar(100);
    declare v_lang varchar(100);

 	declare exit handler for sqlexception
 	begin
		set v_error = 'mysql exit handler: opening test opportunity failed: '; 
		call _logdberror('t_opentestopportunity', v_error, v_testee, v_testkey, v_oppnum, v_testoppkey, v_clientname, v_sessionkey);
		call _returnerror(v_clientname, 't_opentestopportunity', 'mysql exit handler: unable to open the test opportunity', null, null, null, null);
 	end;  

    set v_starttime = now(3);
	set v_procname = 't_opentestopportunity';
    
    select clientname into v_clientname 
	from `session` 
	where _key = v_sessionkey;

    select _efk_testid into v_testid 
	from sessiontests 
	where _fk_session = v_sessionkey and _efk_adminsubject = v_testkey;
       
    if (v_testee < 0 and _allowanonymoustestee(v_clientname) = 0) then
		if (v_debug = 1) then select 'condition 1'; end if;
		call _returnerror(v_clientname, v_procname,'guest logins not allowed', null, null, null, 'failed');
		leave proc;
    end if;

    if (v_testee < 0) then
	begin
		if (v_debug = 1) then select 'condition 2'; end if;
		set v_testeeid = 'guest';  
		set v_testeename = 'guest';  
    end;  
    else
    begin
		if (v_debug = 1) then select 'condition 3'; end if;
		call _getrtsattribute(v_clientname, v_testee, 'externalid', v_testeeid /*output*/, 'student', 0);   
		call _getrtsattribute(v_clientname, v_testee, '--entityname--', v_testeename /*output*/, 'student', 0);   
	end;    
    end if;
    
    select maxopportunities into v_maxopportunities
    from configs.client_testproperties 
	where clientname = v_clientname and testid = v_testid;

    if (v_sessionkey is not null and issessionopen(v_sessionkey) = 0) then
		if (v_debug = 1) then select 'condition 4. exit'; end if;
		set v_reason = 'the session is not available for testing. please check with your test administrator.';
		call _logdblatency(v_procname, v_starttime, v_testee, 1, null, null, null, null, null); 
		call _returnerror(v_clientname, v_procname, v_reason, null, null, '_canopentestopportunity', 'failed');
		leave proc;
    end if;

	if (v_debug = 1) then select '_canopentestopportunity', v_clientname, v_testee, v_testkey, hex(v_sessionkey), v_maxopportunities; end if;
	call _canopentestopportunity(v_clientname, v_testee, v_testkey, v_sessionkey, v_maxopportunities, v_isnew /*output*/, v_oppnum /*output*/, v_reason /*output*/, 0);
	if (v_debug = 1) then select '_canopentestopportunity', v_isnew, v_oppnum, v_reason; end if;
	
    if (v_oppnum = 0 ) then
		if (v_debug = 1) then select 'condition 5. exit'; end if;
		select 0 as opportunity, 'denied' as `status`, v_reason as `reason`, '_canopentestopportunity' as `context`, cast(null as char) as `argstring`, cast(null as char) as `delimiter`;
		call _logdblatency(v_procname, v_starttime, v_testee, 1, null, null, null, null, null); 
		leave proc;
    end if;
    
    set v_proctor = (select _efk_proctor from `session` where _key = v_sessionkey);

    if (v_isnew = 1) then
    begin
		if (v_debug = 1) then select 'condition 6'; end if;
	    if (v_proctor is null) then 
			set v_newstatus = 'approved';	-- automatically approve proctorless session (for practice test)
		else 
			set v_newstatus = 'pending';
		end if;
		
		if ((v_guestaccommodations is null or length(v_guestaccommodations) = 0) and v_testee > 0) then 
            call _getrtsattribute(v_clientname, v_testee, '--accommodations--', v_guestaccommodations /*output*/, 'student', 0);
            if (length(v_guestaccommodations) = 0) then set v_guestaccommodations = null; end if;
        end if;

		if (v_debug = 1) then select '_opennewopportunity', v_clientname, v_testee, v_testkey, v_oppnum, hex(v_sessionkey), hex(v_browserkey), v_testeeid, v_testeename, v_newstatus, v_guestaccommodations; end if; 
        call _opennewopportunity(v_clientname, v_testee, v_testkey, v_oppnum, v_sessionkey, v_browserkey, v_testeeid, v_testeename, v_newstatus, v_guestaccommodations, v_testoppkey /*output*/);       
		if (v_debug = 1) then select '_opennewopportunity', v_testoppkey; end if; 
	end;
	else
	begin
		if (v_debug = 1) then select 'condition 7'; end if;
		set v_restorerts = _restorertsaccommodations(v_clientname);
		if (v_restorerts = 1 and v_testee > 0) then
		begin
		  call _getrtsattribute( v_clientname, v_testee, '--accommodations--', v_guestaccommodations /*output*/, 'student', 0);
		  if (length(v_guestaccommodations) = 0) then set v_guestaccommodations = null; end if;
		end;
		end if;

		if (v_debug = 1) then select '_openexistingopportunity', v_clientname, v_testee, v_testkey, v_oppnum, hex(v_sessionkey), hex(v_browserkey), v_guestaccommodations, v_restorerts; end if;
		call _openexistingopportunity(v_clientname, v_testee, v_testkey, v_oppnum, v_sessionkey, v_browserkey, v_newstatus /*output*/, v_guestaccommodations, v_restorerts, v_testoppkey /*output*/, 0);
		if (v_debug = 1) then select '_openexistingopportunity', v_newstatus, v_testoppkey; end if; 

		if (v_proctor is null) then
			set v_newstatus = 'approved';
			update testopportunity 
			set `status` = 'approved' 
			where _key = v_testoppkey;
	    end if;
	end;
    end if;
    
    select sessionid, proctorname into v_sessid, v_proctorname
    from `session` where _key = v_sessionkey;
    
    select accvalue into v_lang 
	from testeeaccommodations 
    where _fk_testopportunity = v_testoppkey and acctype = 'language';
    
    update testopportunity 
	set sessid = v_sessid
	  , proctorname = v_proctorname
	  , `language` = v_lang
	  , _fk_session = v_sessionkey
    where _key = v_testoppkey;

	if (v_debug = 1) then select v_sessid, v_proctorname, v_oppnum as opportunity, v_newstatus as `status`, v_lang, hex(v_testoppkey) as oppkey; end if;

    call _logdblatency(v_procname, v_starttime, v_testee, 1, null, v_testoppkey, null, null, null);

    select v_oppnum as opportunity, v_newstatus as `status`, cast(null as char) as reason, v_testoppkey as oppkey;

 end $$

DELIMITER ;